/*
 * SupervisedIndividuals Management
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// SupervisedIndividual
    /// </summary>
    [DataContract(Name = "SupervisedIndividual")]
    public partial class SupervisedIndividual : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SupervisedIndividual" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SupervisedIndividual() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SupervisedIndividual" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="email">email (required).</param>
        /// <param name="dateOfJoining">dateOfJoining (required).</param>
        /// <param name="dateOfBirth">dateOfBirth (required).</param>
        public SupervisedIndividual(string id = default(string), string name = default(string), string email = default(string), DateOnly dateOfJoining = default(DateOnly), DateOnly dateOfBirth = default(DateOnly))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for SupervisedIndividual and cannot be null");
            }
            this.Id = id;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for SupervisedIndividual and cannot be null");
            }
            this.Name = name;
            // to ensure "email" is required (not null)
            if (email == null)
            {
                throw new ArgumentNullException("email is a required property for SupervisedIndividual and cannot be null");
            }
            this.Email = email;
            this.DateOfJoining = dateOfJoining;
            this.DateOfBirth = dateOfBirth;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name = "email", IsRequired = true, EmitDefaultValue = true)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets DateOfJoining
        /// </summary>
        [DataMember(Name = "dateOfJoining", IsRequired = true, EmitDefaultValue = true)]
        public DateOnly DateOfJoining { get; set; }

        /// <summary>
        /// Gets or Sets DateOfBirth
        /// </summary>
        [DataMember(Name = "dateOfBirth", IsRequired = true, EmitDefaultValue = true)]
        public DateOnly DateOfBirth { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SupervisedIndividual {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  DateOfJoining: ").Append(DateOfJoining).Append("\n");
            sb.Append("  DateOfBirth: ").Append(DateOfBirth).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 20)
            {
                yield return new ValidationResult("Invalid value for Name, length must be less than 20.", new [] { "Name" });
            }

            yield break;
        }
    }

}
